// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List Assets
	// (GET /assets)
	GetAssets(w http.ResponseWriter, r *http.Request)
	// Create Asset
	// (POST /assets)
	PostAssetCreate(w http.ResponseWriter, r *http.Request)
	// Delete Asset
	// (DELETE /assets/{asset_id})
	DeleteAssetsAssetId(w http.ResponseWriter, r *http.Request, assetId string)
	// Get Asset
	// (GET /assets/{asset_id})
	GetAssetAssetId(w http.ResponseWriter, r *http.Request, assetId string)
	// Update Asset
	// (PUT /assets/{asset_id})
	PutAssetsAssetId(w http.ResponseWriter, r *http.Request, assetId string)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// List Assets
// (GET /assets)
func (_ Unimplemented) GetAssets(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create Asset
// (POST /assets)
func (_ Unimplemented) PostAssetCreate(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete Asset
// (DELETE /assets/{asset_id})
func (_ Unimplemented) DeleteAssetsAssetId(w http.ResponseWriter, r *http.Request, assetId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get Asset
// (GET /assets/{asset_id})
func (_ Unimplemented) GetAssetAssetId(w http.ResponseWriter, r *http.Request, assetId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update Asset
// (PUT /assets/{asset_id})
func (_ Unimplemented) PutAssetsAssetId(w http.ResponseWriter, r *http.Request, assetId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetAssets operation middleware
func (siw *ServerInterfaceWrapper) GetAssets(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAssets(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostAssetCreate operation middleware
func (siw *ServerInterfaceWrapper) PostAssetCreate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAssetCreate(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteAssetsAssetId operation middleware
func (siw *ServerInterfaceWrapper) DeleteAssetsAssetId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "asset_id" -------------
	var assetId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset_id", runtime.ParamLocationPath, chi.URLParam(r, "asset_id"), &assetId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "asset_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAssetsAssetId(w, r, assetId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetAssetAssetId operation middleware
func (siw *ServerInterfaceWrapper) GetAssetAssetId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "asset_id" -------------
	var assetId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset_id", runtime.ParamLocationPath, chi.URLParam(r, "asset_id"), &assetId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "asset_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAssetAssetId(w, r, assetId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutAssetsAssetId operation middleware
func (siw *ServerInterfaceWrapper) PutAssetsAssetId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "asset_id" -------------
	var assetId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset_id", runtime.ParamLocationPath, chi.URLParam(r, "asset_id"), &assetId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "asset_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutAssetsAssetId(w, r, assetId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/assets", wrapper.GetAssets)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/assets", wrapper.PostAssetCreate)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/assets/{asset_id}", wrapper.DeleteAssetsAssetId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/assets/{asset_id}", wrapper.GetAssetAssetId)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/assets/{asset_id}", wrapper.PutAssetsAssetId)
	})

	return r
}

type GetAssetsRequestObject struct {
}

type GetAssetsResponseObject interface {
	VisitGetAssetsResponse(w http.ResponseWriter) error
}

type GetAssets200JSONResponse struct {
	Assets *[]struct {
		AssetId     string  `json:"asset_id"`
		CreatedAt   string  `json:"created_at"`
		DeletedAt   *string `json:"deleted_at,omitempty"`
		Description *string `json:"description,omitempty"`
		Name        string  `json:"name"`
		Ticker      string  `json:"ticker"`
		UpdatedAt   string  `json:"updated_at"`
	} `json:"assets,omitempty"`
}

func (response GetAssets200JSONResponse) VisitGetAssetsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostAssetCreateRequestObject struct {
	Body *PostAssetCreateJSONRequestBody
}

type PostAssetCreateResponseObject interface {
	VisitPostAssetCreateResponse(w http.ResponseWriter) error
}

type PostAssetCreate200Response struct {
}

func (response PostAssetCreate200Response) VisitPostAssetCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteAssetsAssetIdRequestObject struct {
	AssetId string `json:"asset_id"`
}

type DeleteAssetsAssetIdResponseObject interface {
	VisitDeleteAssetsAssetIdResponse(w http.ResponseWriter) error
}

type DeleteAssetsAssetId200Response struct {
}

func (response DeleteAssetsAssetId200Response) VisitDeleteAssetsAssetIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GetAssetAssetIdRequestObject struct {
	AssetId string `json:"asset_id"`
}

type GetAssetAssetIdResponseObject interface {
	VisitGetAssetAssetIdResponse(w http.ResponseWriter) error
}

type GetAssetAssetId200JSONResponse struct {
	AssetId     string  `json:"asset_id"`
	CreatedAt   string  `json:"created_at"`
	DeletedAt   *string `json:"deleted_at,omitempty"`
	Description *string `json:"description,omitempty"`
	Name        string  `json:"name"`
	Ticker      string  `json:"ticker"`
	UpdatedAt   string  `json:"updated_at"`
}

func (response GetAssetAssetId200JSONResponse) VisitGetAssetAssetIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutAssetsAssetIdRequestObject struct {
	AssetId string `json:"asset_id"`
	Body    *PutAssetsAssetIdJSONRequestBody
}

type PutAssetsAssetIdResponseObject interface {
	VisitPutAssetsAssetIdResponse(w http.ResponseWriter) error
}

type PutAssetsAssetId200Response struct {
}

func (response PutAssetsAssetId200Response) VisitPutAssetsAssetIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List Assets
	// (GET /assets)
	GetAssets(ctx context.Context, request GetAssetsRequestObject) (GetAssetsResponseObject, error)
	// Create Asset
	// (POST /assets)
	PostAssetCreate(ctx context.Context, request PostAssetCreateRequestObject) (PostAssetCreateResponseObject, error)
	// Delete Asset
	// (DELETE /assets/{asset_id})
	DeleteAssetsAssetId(ctx context.Context, request DeleteAssetsAssetIdRequestObject) (DeleteAssetsAssetIdResponseObject, error)
	// Get Asset
	// (GET /assets/{asset_id})
	GetAssetAssetId(ctx context.Context, request GetAssetAssetIdRequestObject) (GetAssetAssetIdResponseObject, error)
	// Update Asset
	// (PUT /assets/{asset_id})
	PutAssetsAssetId(ctx context.Context, request PutAssetsAssetIdRequestObject) (PutAssetsAssetIdResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHttpHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHttpMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetAssets operation middleware
func (sh *strictHandler) GetAssets(w http.ResponseWriter, r *http.Request) {
	var request GetAssetsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAssets(ctx, request.(GetAssetsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAssets")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAssetsResponseObject); ok {
		if err := validResponse.VisitGetAssetsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostAssetCreate operation middleware
func (sh *strictHandler) PostAssetCreate(w http.ResponseWriter, r *http.Request) {
	var request PostAssetCreateRequestObject

	var body PostAssetCreateJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostAssetCreate(ctx, request.(PostAssetCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAssetCreate")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostAssetCreateResponseObject); ok {
		if err := validResponse.VisitPostAssetCreateResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteAssetsAssetId operation middleware
func (sh *strictHandler) DeleteAssetsAssetId(w http.ResponseWriter, r *http.Request, assetId string) {
	var request DeleteAssetsAssetIdRequestObject

	request.AssetId = assetId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteAssetsAssetId(ctx, request.(DeleteAssetsAssetIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteAssetsAssetId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteAssetsAssetIdResponseObject); ok {
		if err := validResponse.VisitDeleteAssetsAssetIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAssetAssetId operation middleware
func (sh *strictHandler) GetAssetAssetId(w http.ResponseWriter, r *http.Request, assetId string) {
	var request GetAssetAssetIdRequestObject

	request.AssetId = assetId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAssetAssetId(ctx, request.(GetAssetAssetIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAssetAssetId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAssetAssetIdResponseObject); ok {
		if err := validResponse.VisitGetAssetAssetIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutAssetsAssetId operation middleware
func (sh *strictHandler) PutAssetsAssetId(w http.ResponseWriter, r *http.Request, assetId string) {
	var request PutAssetsAssetIdRequestObject

	request.AssetId = assetId

	var body PutAssetsAssetIdJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PutAssetsAssetId(ctx, request.(PutAssetsAssetIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutAssetsAssetId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PutAssetsAssetIdResponseObject); ok {
		if err := validResponse.VisitPutAssetsAssetIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xUTW/jOAz9KwV3j97a+WgS+9bdBbrFDjAFBnMqikKx6FiOLSmSHNsJ/N8HkpK2QdI0",
	"HcxhLgkhmI+Pj4/cQioqKThyoyHZgk5zrIgLb7VGYwOphERlGLpnYp+fGbWx6SRCAtooxhcQQPuXNkKW",
	"bJG7RPsRzOJ8M+c3q7gh4xT6PoBUITFIn4m5FEMPKhotOckXTdo6DIolfg6jm9IyK3QRF80y22HoVDFp",
	"mOCXgrQ8r008nCx5IWcOhJMKL82WxQ2d0na0IotV7LINS5eoLs2fx7rDcdGopo1Kl19L+kkp2wnTWble",
	"FznOcugtiMJVzRRSSB5fp7vr7IXiwdgOCj/Zb0xpK3vLBHsiYl5gat4hEotNm5WkWg/zGbVE+gAYz4Rr",
	"ZIf3oFiK/zFthOq+oVqz1DJao9JuZjC4jqAPQEjkRDJIYHRtnwKQxOTOraFryIUL72brZWJnfm9Z3KG5",
	"9V9YHbQUXHubD6PI/qWCG+QukUhZstSlhoX2nvHr8s6SuIgZrFzwp8IMEvgjfF24cLdtodetfxGOKEW6",
	"d3RbNpuu1KRQRkykH+Ch3P2Rt+Hr/84tuq4qojpI4AvT5uql8VNlNstxS1lbUD7XymVLoU8I+CC0V/Af",
	"Zw/wdkJt/ha0+5SCFwi0s+vxmD5o13O72tvzVL+TLm9X0wXhFY9jr+HOO+F2vxS9L2Uvz7EQ/7p3r6n7",
	"vafwU2Q90FmycjoeL+lqPmKDib+pZ819ns6vHdCH1rtDc7a3et7kmRSExati7I1HFKnQoNKQPG6BWVi7",
	"4Psblby9Wq/HzKgagzf0D69j3z8FIOtTjq7N8RR/O0t/dwf4rJJDnDXaaLppOjPYVdKo1nsha1VCArkx",
	"MgnDUqSkzIU2yTSKIrDqnMKsFM4Yl+JGZGQEff8jAAD//8qZ9bBACAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
