// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: asset.sql

package sqlc

import (
	"context"

	"github.com/gofrs/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createAsset = `-- name: CreateAsset :one
INSERT INTO trading.asset (name, ticker, description) VALUES ($1, $2, $3) RETURNING asset_id, name, ticker, created_at, updated_at, deleted_at, description
`

type CreateAssetParams struct {
	Name        string
	Ticker      string
	Description pgtype.Text
}

func (q *Queries) CreateAsset(ctx context.Context, arg CreateAssetParams) (TradingAsset, error) {
	row := q.db.QueryRow(ctx, createAsset, arg.Name, arg.Ticker, arg.Description)
	var i TradingAsset
	err := row.Scan(
		&i.AssetID,
		&i.Name,
		&i.Ticker,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Description,
	)
	return i, err
}

const deleteAsset = `-- name: DeleteAsset :exec
DELETE FROM trading.asset WHERE asset_id = $1
`

func (q *Queries) DeleteAsset(ctx context.Context, assetID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteAsset, assetID)
	return err
}

const getAsset = `-- name: GetAsset :one
SELECT asset_id, name, ticker, created_at, updated_at, deleted_at, description from trading.asset where asset_id = $1
`

func (q *Queries) GetAsset(ctx context.Context, assetID uuid.UUID) (TradingAsset, error) {
	row := q.db.QueryRow(ctx, getAsset, assetID)
	var i TradingAsset
	err := row.Scan(
		&i.AssetID,
		&i.Name,
		&i.Ticker,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Description,
	)
	return i, err
}

const listAssets = `-- name: ListAssets :many
SELECT asset_id, name, ticker, created_at, updated_at, deleted_at, description from trading.asset
`

func (q *Queries) ListAssets(ctx context.Context) ([]TradingAsset, error) {
	rows, err := q.db.Query(ctx, listAssets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TradingAsset
	for rows.Next() {
		var i TradingAsset
		if err := rows.Scan(
			&i.AssetID,
			&i.Name,
			&i.Ticker,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAsset = `-- name: UpdateAsset :one
UPDATE trading.asset SET name = $1, ticker = $2, description = $3 WHERE asset_id = $4 RETURNING asset_id, name, ticker, created_at, updated_at, deleted_at, description
`

type UpdateAssetParams struct {
	Name        string
	Ticker      string
	Description pgtype.Text
	AssetID     uuid.UUID
}

func (q *Queries) UpdateAsset(ctx context.Context, arg UpdateAssetParams) (TradingAsset, error) {
	row := q.db.QueryRow(ctx, updateAsset,
		arg.Name,
		arg.Ticker,
		arg.Description,
		arg.AssetID,
	)
	var i TradingAsset
	err := row.Scan(
		&i.AssetID,
		&i.Name,
		&i.Ticker,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Description,
	)
	return i, err
}
